*** Settings ***
Documentation    This resource file contains global helper keywords.

Resource    _global_test_setup.txt

*** Variables ***
${randomizer}    0

*** Keywords ***

# BELOW KEYWORD BUNDLES FAILURE DETAILS AND WILL FAIL THE TEST. 
# CUSTOM_FAIL_MSG ALLOWS A CUSTOM MESSAGE TO BE PROVIDED DEPENDING 
# ON THE TEST CIRCUMSTANCES.
Fail with Failure Details    [Arguments]    ${custom_fail_msg}=Test has failed with failure details
    #Log Title
    #Log Location
    Capture Page Screenshot
    #Capture Full Page Screenshot
    #HTTP Status Code info  #7.26.2017 - commented out because it is outdated and was not particularly helpful when viewing fail data. -CMcCue
    Fail    ${custom_fail_msg}

Fail with Location Detail    [Arguments]    ${custom_fail_msg}=Test has failed with failure details
    Log Location
    Fail    ${custom_fail_msg}

Delete Cookies and pass execution    [Arguments]    ${custom_msg}=Pass Execution keyword has been run and ended the test.
    Delete All Cookies
    Delete All Cookies
    Pass Execution    ${custom_msg}
## ==============================================
## ==============================================
Print to Log and Console    [Arguments]    ${custom_msg}=.
    Log To Console    ${custom_msg}
    Log               ${custom_msg}
# ===================================================
# ===================================================
Check location against regex
    [Arguments]    ${expected_regex_link}
    ${current_url}=    Log Location
    Log    ${expected_regex_link}
    Should Match Regexp    ${current_url}    ${expected_regex_link}


Global - page has loaded
    Wait For Condition    return document.readyState == 'complete'
    #Wait Activity    return document.readyState == 'complete'


Verify Correct Link Title  [Arguments]  ${Expected page title}
    ${Actual page title}  Get Title 
    Should Contain  ${Actual page title}  ${Expected page title}
    Should Not Contain  ${Actual page title}  404
    Should Not Contain  ${Actual page title}  Error

Verify Correct Link URL  [Arguments]  ${Expected page url}
    ${Actual page url}    Get Location
    Log    ${Actual page url}
    Log    ${Expected page url}
    # Regular expression url replacement for Firefox 
    ${firefox url update}=
    ...    Replace String Using Regexp
    ...    ${Expected page url}    [ ]    %20
    Run Keyword If  '${browser_ff}' == 'True'
    ...    Should Contain
    ...    ${Actual page url}    ${firefox url update}
    Run Keyword Unless  '${browser_ff}' == 'True'
    ...    Should Contain
    ...    ${Actual page url}    ${Expected page url}
    #Page Should Not Contain    Server Error
    #Page Should Not Contain  404 - File or directory not found.
    
Clear and Type into element
    [Arguments]
    ...    ${field location}
    ...    ${text entry}
    ...    ${timeout}=${wait_time}
    ...    ${fast_type_mode}=True
    ...    ${slow_mode_delay}=0.1
    [Documentation]    Added an option to type into an element in "slow mode", as there are some cases where the keyword "Input Text" enters text too quickly for certain fields to properly type it. One notable location is in the name fields for the Visa Checkout popup, where sometimes only partial names get entered into it using "Input Text" keyword.
    Wait Until Element Is Visible         ${field location}    ${timeout}
    Clear Text                    ${field location}
    Run Keyword If    ${fast_type_mode}
    ...    Input Text                     ${field location}    ${text entry}
    ...    ELSE    Clear and Type into element - slow mode    ${field location}    ${text entry}    ${slow_mode_delay}
Clear and Type into element - slow mode
    [Arguments]
    ...    ${field location}
    ...    ${text entry}
    ...    ${slow_mode_delay}=0.1
    [Documentation]    This function is to be used with "Clear and Type into element" function. It can be triggered from that function by passing the optional argument "fast_type_mode=False" along with the field location and text entry arguments.
    @{text_characters}=    Split String To Characters    ${text entry}
    :FOR    ${char}    IN    @{text_characters}
    \    Press Keycode    ${field location}    ${char}
    \    Sleep    ${slow_mode_delay}
    Log    Entered text '${text entry}' into field ${field location}
    
Clear and Type into element - secure
    [Arguments]
    ...    ${field location}
    ...    ${text entry}
    ...    ${timeout}=${wait_time}
    [Documentation]    Uses Selenium2Library Input Password keyword; does not store entered text in the log file or xml file.
    Wait Until Element Is Visible         ${field location}    ${timeout}
    Clear Text                    ${field location}
    Input Password                        ${field location}    ${text entry}

Switch Window, Verify Element, Switch Back to Main Window
    [Arguments]
    ...    ${page title}
    ...    ${element}
    ...    ${sleep_time}=5
    sleep  ${sleep_time}
    Select Window  title=${page title}
    Verify Element On Page    ${element}
    Close Second Window, Switch Back to Main Window
    

Close Second Window, Switch Back to Main Window
    Close Window
    Select Window



Create list to generate random variable    [Arguments]    ${number_of_elements_on_page}    ${range_start}=0
    # ====================
    ${num_list}=    Create List
    :FOR    ${num}    IN RANGE    ${range_start}    ${number_of_elements_on_page}
    \    Append To List    ${num_list}    ${num}
    # ===================
    Set Global Variable    ${num_list}    ${num_list}
    [Return]    ${num_list}
    # ===================
# ====================================================================
# ====================================================================

Javascript Scroll To Bottom of Page
    ${height}    ${width}=    Get Window Size
    Execute Javascript    return window.scrollTo(${width},${height})

Javascript Scroll Down Half The Page
    ${height}    ${width}=    Get Window Size
    #Log To Console    ${height}
    ${half height}    Evaluate    ${height} / 2
    #Log To Console    Half size of windows: ${half height}
    Execute Javascript    return window.scrollTo(${width},${half height})

Javascript Scroll To Top Of Page    [Arguments]    ${page}=window
    Run Keyword If    '''${page}''' == '''window'''
    ...    Execute Javascript    return ${page}.scrollTo(0,0)
    ...    ELSE    Execute Javascript    return ${page}.scrollTop(0,0)
    Sleep    0.2

Javascript Scroll Item into view    [Arguments]    ${element}    ${scrollBool}=false
    [Documentation]    Scrolls item into view using jQuery. ${scrollBool} used for jQuery command; must be a lowercase false or lowercase true. using false will display item towards bottom of page, while true will display item at top of page.
    ${element_ready}=    Remove element variable tag    ${element}
    
    Run Keyword If    '''"''' in '''${element_ready}'''
    ...    Execute Javascript    $('${element_ready}')[0].scrollIntoView(${scrollBool})
    ...    ELSE    Execute Javascript    $("${element_ready}")[0].scrollIntoView(${scrollBool})
    
Javascript stop page load
    Execute Javascript    return window.stop();

get vertical position using js
    [Arguments]    ${element}
    ${element_ready}=    Remove element variable tag    ${element}
    
    ${get_positions}=    Run Keyword If    '''"''' in '''${element_ready}'''
    ...    Execute Javascript    return $('${element_ready}').position()
    ...    ELSE    Execute Javascript    return $("${element_ready}").position()

    ${get_vertical_pos}=    Get From Dictionary    ${get_positions}    top
    [Return]    ${get_vertical_pos}

###############################################
##NOTE: BELOW DOES NOT CURRENTLY WORK FOR LOADING JQUERY ONTO THE PAGE.
##Javascript Dynamic Load on page
##    [Documentation]    Some pages don't have js loaded on it if there is no need for it. This will load it on the page so element locators that use jquery can be used for the selenium scripts.
##    #/** dynamically load jQuery */
##    Execute Async Javascript    (function(jqueryUrl, callback) {
##    ...    if (typeof jqueryUrl != 'string') {
##    ...    jqueryUrl = 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js';}
##    ...    if (typeof jQuery == 'undefined') {
##    ...    var script = document.createElement('script');
##    ...    var head = document.getElementsByTagName('head')[0];
##    ...    var done = false;
##    ...    script.onload = script.onreadystatechange = (function() {
##    ...    if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
##    ...            done = true; script.onload = script.onreadystatechange = null;
##    ...            head.removeChild(script); callback();}});
##    ...    script.src = jqueryUrl; head.appendChild(script);}
##    ...    else {callback();}})(arguments[0], arguments[arguments.length - 1]);
###############################################

Get variable count    [Arguments]    ${element}
    [Documentation]    This keyword uses jQuery to count number of elements matching the input locator. It can take jQuery or CSS element argument only.
    ...    In below example, the element locator jquery=.hello is entered, and 3 elements are found on the page matching that locator:
    ...    >>>Get variable count    jquery=.hello
    ...    >>>3
    ...    Additionally, the function can take bundled element locators, like so:
    ...    >>>Get variable count    jquery=.hello, .world, #all
    ...    >>>5
    ...    The function will separate each bundled locator separated by a comma and count them individually, returning a full count of all matching locators.
    # ====================
    ${element_to_count}=
    ...    Remove element variable tag    ${element}
    # ====================
    ${new_element_list}=    Create List
    ${new_element_list}=    split_string_using_regex    ${element_to_count}
    ${total_count}=    Set Variable    0
    # ====================
    Register Keyword To Run On Failure    Nothing
    # ====================
    :FOR    ${locator}    IN    @{new_element_list}
    \    ${check_element}=    Run Keyword And Return Status
    \    ...    Page Should Contain Element    jquery=${locator}    loglevel=NONE
    \    ${count}=    Run Keyword If    ${check_element}    get matching sizzle count    ${locator}    ELSE    Set Variable    0
    #\    ...    Execute Javascript    return ($("${locator}").length);
    #\    ...    ELSE    Set Variable    0
    \    ${total_count}=    Evaluate    ${total_count} + ${count}
    Set fail message details
    Set Test Variable    ${var_count}    ${total_count}
    [Return]    ${total_count}
    # ====================
Remove element variable tag
    [Arguments]    ${element}    ${tag_to_remove}=(jquery|css)=
    ${removeVarTag}=
    ...    Remove chars using regex
    ...    ${element}    chars_to_remove=${tag_to_remove}
    [Return]    ${removeVarTag}

Remove chars using regex
    [Arguments]    ${element}    ${chars_to_remove}=(jquery|css)=    ${num_to_remove}=-1
    ${removeChars}=
    ...    Replace String Using Regexp
    ...    ${element}    (?i)${chars_to_remove}    ${EMPTY}    count=${num_to_remove}
    [Return]    ${removeChars}

Randomizer    [Arguments]    ${set_randomize_num}=2    ${set_test_var}=False
    [Documentation]    Defaults to selecting 0 or 1 to make random 50/50 decision. Optional argument can be given by providing a different number; if 3 is entered, random decision of 0-2 will be given, etc.
    ${randomizer}=    Evaluate    random.randint(0,${set_randomize_num}-1)    modules=random
    Run Keyword If    ${set_test_var} == True
    ...    Set Test Variable    ${randomizer}    ${randomizer}
    [Return]    ${randomizer}

## ============================================
## ============================================

Check country if test should end at billing
    Run Keyword If    ${region_eu} == True
    ...    Pass Execution    Test passed up to the checkout shipping/billing pages. Cannot test placing order for this country.
## ============================================
Disable for non-US
    Run Keyword If    ${country_us} == False
    ...    Pass Execution    Cannot test - feature not available or test not yet programmed for this region.

Disable for EU
    Run Keyword If    ${region_eu} == True
    ...    Pass Execution    Cannot test - feature not available or test not yet programmed for this region.

Disable for Production Environment
    Run Keyword If    ${env_prod} == True
    ...    Pass Execution    This test case cannot be run in the production environment.
## ============================================
Stop test for EU
    Run Keyword If    ${region_eu} == True
    ...    Pass Execution    Test passed up to the checkout shipping/billing pages. CF2016 server update not yet completed; once this is finalized, this can be removed.

Disable for EU - SE and DK
    Run Keyword If    ${country_se} or ${country_dk}
    ...    Pass Execution    Cannot test - feature not available or test not yet programmed for this region.
    


# *************************************************************
# *************************************************************
# *************************************************************
Check for image    [Arguments]    ${img_name}    ${img_loc_on_page}=None    ${img_path}=None
    # ==============
    ${var_list}=    Run Keyword If    '''${img_loc_on_page}''' != '''None'''
    ...    split_string_using_regex    ${img_loc_on_page}
    # ==============
    #Run Keyword If    '''${img_loc_on_page}''' != '''None'''
    :FOR    ${variable}    in    ${var_list}
        \    Verify Element and set variable    ${variable}
    # ==============
    Run Keyword If    '''${img_loc_on_page}''' != '''None'''
    ...    Javascript Scroll to Element    ${js_element_to_check}
    # ==============
    Run Keyword If    '''${img_path}''' != '''None'''
    ...    Log    ${img_path}/images    #${EXECDIR}/${img_path}
    Run Keyword If    '''${img_path}''' != '''None'''
        ...    Set Reference Folder    ${img_path}/images    #${EXECDIR}/${img_path}
    ${check_image_boolean}    Does Exist    ${img_name}
    # ==============
    # ==============
    Run Keyword If    ${check_image_boolean} == False
    ...    Failure Details
    Run Keyword If    ${check_image_boolean} == False
    ...    Fail    ${img_name} was not found to be on the page. Please check manually.
    # ==============
    # ==============
Check for image new    [Arguments]    ${img_name}    ${img_loc_on_page}=None    ${img_path}=None
    # ==============
    # ==============
    ${var_list}=    Run Keyword If    '''${img_loc_on_page}''' != '''None'''
    ...    split_string_using_regex    ${img_loc_on_page}
    # ==============
    :FOR    ${variable}    in    ${var_list}
        \    Verify Element and set variable    ${variable}
    # ==============
    Run Keyword If    '''${img_path}''' != '''None'''
    ...    Log    ${img_path}/images    #${EXECDIR}/${img_path}
    Run Keyword If    '''${img_path}''' != '''None'''
        ...    Set Reference Folder    ${img_path}/images    #${EXECDIR}/${img_path}
    ${check_image_boolean}    Locate    ${img_name}
    # ==============
    # ==============

# *************************************************************
Global wait for loading to finish
    [Arguments]    ${loading_variable}=${global_popup_loading}    ${var_removed}=False
    Sleep    0.5
    ${checkfor_loading}=
    ...    Run Keyword And Return Status
    ...    Wait Until Page Contains Element    ${loading_variable}    3
    
    Run Keyword If    ${var_removed} == False and ${checkfor_loading} == True
    ...    Wait Until Element Is Not Visible    ${loading_variable}
    ...    ELSE IF    ${var_removed} == True and ${checkfor_loading} == True
    ...    Wait Until Page Does Not Contain Element    ${loading_variable}
# *************************************************************
# *************************************************************


